[main]
# 可以使用默认的securityManager
#覆盖默认的securityManager
# note 创建对象,其构造器必须是public空参构造器,通过反射创建对应的实例
#securityManager=org.apache.shiro.mgt.DefaultSecurityManager

#authenticator
authenticator = org.apache.shiro.authc.pam.ModularRealmAuthenticator
authenticationStrategy = org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy
# note 嵌套属性setter注入
# note 使用这样的方式也是可以注入的
authenticator.authenticationStrategy = $authenticationStrategy
# note 对象引用setter注入
# note 会自动通过securityManager.setAuthenticator(authenticator)注入引用依赖
securityManager.authenticator = $authenticator

#authorizer
authorizer = org.apache.shiro.authz.ModularRealmAuthorizer
permissionResolver = org.apache.shiro.authz.permission.WildcardPermissionResolver
authorizer.permissionResolver = $permissionResolver
securityManager.authorizer = $authorizer

#realm
dataSource = com.alibaba.druid.pool.DruidDataSource
dataSource.driverClassName = com.mysql.jdbc.Driver
dataSource.url = jdbc:mysql://localhost:3306/shiro
dataSource.username = root
dataSource.password = root
jdbcRealm = org.apache.shiro.realm.jdbc.JdbcRealm
jdbcRealm.dataSource = $dataSource
# note 常量值setter注入
# note 会自动调用jdbcRealm.setPermissionsLookupEnabled(true),对于这种常量值,会自动类型转换.
jdbcRealm.permissionsLookupEnabled = true
securityManager.realms = $jdbcRealm

# note 配置规则如下
# 1.对象名 = 全限定类名 相对于调用public无参构造器创建对象
# 2.对象名.属性名 = 值 相当于用setter方法设置常量值
# 3.对象名.属性名 = $对象引用 相当于调用setter方法设置对象引用

# ini 的配置类似于java中的properties(key = value),不过提供了将key/value分类的特性
# key部分不重复即可,而不是配置整个配置文件