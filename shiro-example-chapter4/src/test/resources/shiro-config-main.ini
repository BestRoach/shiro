[main]
securityManager = org.apache.shiro.mgt.DefaultSecurityManager

#authenticator
authenticator = com.github.zhangkaitao.shiro.chapter4.authenticator.MyAuthenticator

# note byte数组 setter注入
# note 默认需要使用Base进行编码,也可以使用0x十六进制
#base64 byte[]
authenticator.bytes = aGVsbG8=
#hex byte[]
# note 实例化/注入顺序
# 后边的覆盖前边的注入后边的覆盖前边的注入
authenticator.bytes = 0x68656c6c6f

# note Array/Set/List setter注入
# note 多个之间通过","分割
authenticator.array = 1,2,3
authenticator.set = $jdbcRealm,$jdbcRealm
# note Map setter注入
# note 其格式为:map = key : value,key : value
authenticator.map = $jdbcRealm:$jdbcRealm,1:1,key:abc

authenticationStrategy = org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy
authenticator.authenticationStrategy = $authenticationStrategy
securityManager.authenticator = $authenticator

#authorizer
authorizer = org.apache.shiro.authz.ModularRealmAuthorizer
permissionResolver = org.apache.shiro.authz.permission.WildcardPermissionResolver
authorizer.permissionResolver = $permissionResolver
securityManager.authorizer = $authorizer

#realm
dataSource = com.alibaba.druid.pool.DruidDataSource
dataSource.driverClassName = com.mysql.jdbc.Driver
dataSource.url = jdbc:mysql://localhost:3306/shiro
dataSource.username = root
dataSource.password = root

jdbcRealm = org.apache.shiro.realm.jdbc.JdbcRealm
jdbcRealm.dataSource = $dataSource
jdbcRealm.permissionsLookupEnabled = true
securityManager.realms = $jdbcRealm

# [users] 部分
# note 配置用户名 / 密码及其角色,格式:"用户名 = 密码,角色1, 角色2",角色部分可以省略
# [users]
# zhang = 123,role1,role2
# wang = 123
# 密码的生成要生成摘要,加密存储

# [roles] 部分
# 配置角色及权限之间的关系,格式"角色 = 权限1,权限2"
# [roles]
# role1 = user:create,user:update
# role2 =
# 如果角色没有对应的权限,可以不配roles

#[urls] 部分
# 配置url及显影的拦截器之间的关系,格式"url = 拦截器[参数],拦截器[参数]"
# [urls]
# /admin/** = authc, roles[admin], perms["permission1"]
