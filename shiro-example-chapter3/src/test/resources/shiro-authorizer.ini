[main]
#自定义authorizer
# AuthorizingSecurityManager 会在初始化完成后自动将相应的 realm 设置进去，我们也可以通过调用其 setRealms() 方法进行设置
authorizer = org.apache.shiro.authz.ModularRealmAuthorizer
#自定义permissionResolver
#permissionResolver=org.apache.shiro.authz.permission.WildcardPermissionResolver
permissionResolver = com.github.zhangkaitao.shiro.chapter3.permission.BitAndWildPermissionResolver
authorizer.permissionResolver = $permissionResolver
#自定义rolePermissionResolver
rolePermissionResolver = com.github.zhangkaitao.shiro.chapter3.permission.MyRolePermissionResolver
authorizer.rolePermissionResolver = $rolePermissionResolver

securityManager.authorizer = $authorizer

# 自定义realm 一定要放在securityManager.authorizer赋值之后
# （因为调用setRealms会将realms设置给authorizer，并给各个Realm设置permissionResolver和rolePermissionResolver）
realm = com.github.zhangkaitao.shiro.chapter3.realm.MyRealm
securityManager.realms = $realm

# Authorizer的职责是进行授权(访问控制),
# 是Shiro API中授权核心的入口点,其提供了相应的角色/授权判断接口,
# SecurityManager继承了Authorizer接口,且提供了ModularRealmAuthorizer用于多Realm是的授权匹配.
# PermissionResolver用于解析权限字符串到Permission实例
# RolePermissionResolver用于根据角色解析相应的权限合计