[main]

passwordService = org.apache.shiro.authc.credential.DefaultPasswordService
hashService = org.apache.shiro.crypto.hash.DefaultHashService
passwordService.hashService = $hashService
hashFormat = org.apache.shiro.crypto.hash.format.Shiro1CryptFormat
passwordService.hashFormat = $hashFormat
hashFormatFactory = org.apache.shiro.crypto.hash.format.DefaultHashFormatFactory
passwordService.hashFormatFactory = $hashFormatFactory

passwordMatcher = org.apache.shiro.authc.credential.PasswordMatcher
passwordMatcher.passwordService = $passwordService

myRealm = com.github.zhangkaitao.shiro.chapter5.hash.realm.MyRealm
myRealm.passwordService = $passwordService
myRealm.credentialsMatcher = $passwordMatcher
securityManager.realms = $myRealm

# 1.passwordService使用DefaultPasswordService,如果有必要也可以自定义
# 2.hashService 定义散列密码使用的HashService,默认使用DefaultHashService(默认SHA-256算法)
# 3.hashFormat 用于对散列出的值进行格式化,默认使用 Shiro1CryptFormat,另外提供了 Base64Format 和
#   HexFormat,对于有 salt 的密码请自定义实现 ParsableHashFormat 然后把 salt 格式化到散列值中;
# 4.hashFormatFactory 用于根据散列值得到散列的密码和 salt;因为如果使用如 SHA 算法,那么会生成一个 salt,此
#   salt 需要保存到散列后的值中以便之后与传入的密码比较时使用;默认使用 DefaultHashFormatFactory;
# 5.passwordMatcher 使用 PasswordMatcher,其是一个 CredentialsMatcher 实现;
# 6.将 credentialsMatcher 赋值给 myRealm,myRealm 间接继承了 AuthenticatingRealm,其在调用
#   getAuthenticationInfo 方法获取到 AuthenticationInfo 信息后,会使用 credentialsMatcher 来验证凭据是否匹
#   配,如果不匹配将抛出 IncorrectCredentialsException 异常.